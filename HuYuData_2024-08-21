class Solution {
public:
    int trap(vector<int>& height) {
        stack<int> stack;
        int water = 0;
        int current = 0;
        
        while (current < height.size()) {
            while (!stack.empty() && height[current] > height[stack.top()]) {
                int top = stack.top();
                stack.pop();
                
                if (stack.empty()) break;
                
                int distance = current - stack.top() - 1;
                int bounded_height = min(height[current], height[stack.top()]) - height[top];
                water += distance * bounded_height;
            }
            stack.push(current++);
        }
        return water;
    }
};

// Example usage:
vector<int> height = {0,1,0,2,1,0,1,3,2,1,2,1};
Solution solution;
cout << solution.trap(height) << endl;  // Output: 6
